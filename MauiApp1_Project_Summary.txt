MAUI APP1 PROJECT SUMMARY
==========================

PROJECT OVERVIEW:
- MAUI (Multi-platform App UI) betting application
- Windows target framework: net8.0-windows10.0.19041.0
- Uses MVVM pattern with XAML for UI
- PostgreSQL database via Supabase/Npgsql
- Authentication system with user management

CURRENT STATE:
=============

1. AUTHENTICATION SYSTEM:
- Login page with email/password
- "Remember Me" functionality implemented
- User registration
- Admin user detection (admin@gmail.com)
- Logout functionality

2. MENU SYSTEM:
- Simple flyout menu with static English text
- Menu items: Home, Check Predictions, Settings, Game Rules, Admin Panel, Logout
- Custom colors applied (purple background, blue/red/green text colors)
- Admin menu item hidden for regular users

3. LOCALIZATION:
- LocalizationService implemented with English/French support
- Works for: Login page, Settings page
- Does NOT work for: Main menu items (kept static to avoid issues)
- Language switching in Settings page

4. PAGES IMPLEMENTED:
- LoginPage: Authentication with remember me
- HomePage: Shows matches with team logos
- PredictionsPage: User predictions with team logos
- SettingsPage: User settings, language switching, logout
- GameRulesPage: Game rules display
- AdminPage: Admin panel (hidden for regular users)
- LogoutPage: Handles logout process

5. TEAM LOGOS:
- Logos imported from clubs directory
- Displayed on Home and Predictions pages
- Uses team codes (ars.png, che.png, etc.)

6. DATABASE:
- PostgreSQL via Supabase
- Tables: Users, Matches, Predictions
- Connection string configured
- Sample data seeded

KEY FILES:
==========

AppShell.xaml:
- Main application shell with menu structure
- Custom colors: purple background, blue/red/green text
- All menu items visible and functional

LocalizationService.cs:
- Handles English/French translations
- Properties for each translatable string
- Runtime language switching

Services/Services.cs:
- AuthService: User authentication
- SupabaseService: Database operations
- Team information and logo paths

Views/Views.xaml:
- Login page with localization bindings
- All text elements bound to LocalizationService

SettingsPage.xaml:
- Settings menu with language switching
- Logout option included
- All text localized

CURRENT ISSUES RESOLVED:
=======================
1. Menu text visibility - Fixed with proper styling
2. Localization for main menu - Avoided by using static text
3. Team logo display - Working correctly
4. Logout functionality - Implemented via LogoutPage
5. Admin menu visibility - Working correctly

BUILD STATUS:
===========
- Builds successfully with 6 warnings (non-critical)
- Windows executable generated and runs
- All navigation working

NEXT STEPS FOR ANOTHER AGENT:
===========================

1. TESTING:
- Verify all menu items are visible and functional
- Test language switching in Settings
- Test logout functionality
- Test admin login and admin panel access
- Test team logo display on Home and Predictions pages

2. POTENTIAL IMPROVEMENTS:
- Add more languages to localization
- Implement menu localization (if needed)
- Add more admin features
- Improve UI/UX design
- Add error handling and validation

3. KNOWN LIMITATIONS:
- Main menu uses static English text (by design)
- Limited admin functionality
- Basic UI design

4. TECHNICAL NOTES:
- Uses .NET 8.0
- MAUI framework
- PostgreSQL database
- Supabase integration
- Custom color scheme applied

PROJECT STRUCTURE:
==================
MauiApp1/
├── AppShell.xaml (main menu)
├── AppShell.xaml.cs (navigation)
├── Services/
│   ├── Services.cs (Auth + Database)
│   └── LocalizationService.cs (translations)
├── Views/
│   ├── Views.xaml (Login page)
│   ├── Views.xaml.cs (Login logic)
│   ├── SettingsPage.xaml (Settings)
│   ├── SettingsPage.xaml.cs (Settings logic)
│   ├── LogoutPage.xaml (Logout)
│   └── LogoutPage.xaml.cs (Logout logic)
├── ViewModels/
│   └── ViewModels.cs (MVVM logic)
├── Resources/
│   └── Images/ (team logos)
└── MauiProgram.cs (dependency injection)

BUILD COMMAND:
==============
dotnet build -c Release -p:TargetFramework=net8.0-windows10.0.19041.0 MauiApp1\MauiApp1.csproj

EXECUTABLE LOCATION:
===================
MauiApp1\bin\Release\net8.0-windows10.0.19041.0\win10-x64\MauiApp1.exe

CURRENT WORKING DIRECTORY:
=========================
C:\Users\void7\source\repos\MauiApp1

SOURCE CODE:
===========

1. AppShell.xaml:
```xml
<?xml version="1.0" encoding="UTF-8" ?>
<Shell x:Class="MauiApp1.AppShell"
       xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:MauiApp1.Views"
       Shell.FlyoutBehavior="Flyout"
       Shell.NavBarIsVisible="True"
       Shell.FlyoutBackgroundColor="purple"
       Shell.BackgroundColor="Blue"
       Shell.ForegroundColor="red"
       Shell.TitleColor="Black"
       Shell.UnselectedColor="green"
       Shell.DisabledColor="orange">

    <Shell.Resources>
        <ResourceDictionary>
            <Style TargetType="FlyoutItem">
                <Setter Property="Shell.BackgroundColor" Value="red" />
                <Setter Property="Shell.ForegroundColor" Value="green" />
                <Setter Property="Shell.TitleColor" Value="blue" />
                <Setter Property="Shell.DisabledColor" Value="purple" />
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <!-- Login (Hidden from menu) -->
    <ShellContent x:Name="LoginShell"
                  Route="login"
                  ContentTemplate="{DataTemplate local:LoginPage}"
                  Shell.NavBarIsVisible="False"
                  Shell.FlyoutItemIsVisible="False" />

    <!-- Home -->
    <FlyoutItem Title="Home" Route="home">
        <ShellContent ContentTemplate="{DataTemplate local:HomePage}" />
    </FlyoutItem>

    <!-- Check Predictions -->
    <FlyoutItem Title="Check Predictions" Route="predictions">
        <ShellContent ContentTemplate="{DataTemplate local:PredictionsPage}" />
    </FlyoutItem>

    <!-- Settings -->
    <FlyoutItem Title="Settings" Route="settings">
        <ShellContent ContentTemplate="{DataTemplate local:SettingsPage}" />
    </FlyoutItem>

    <!-- Game Rules -->
    <FlyoutItem Title="Game Rules" Route="gamerules">
        <ShellContent ContentTemplate="{DataTemplate local:GameRulesPage}" />
    </FlyoutItem>

    <!-- Admin (Hidden for regular users) -->
    <FlyoutItem x:Name="AdminMenuItem"
                Title="Admin Panel"
                Route="admin"
                IsVisible="False">
        <ShellContent ContentTemplate="{DataTemplate local:AdminPage}" />
    </FlyoutItem>
    <!-- Logout -->
    <FlyoutItem Title="Logout" Route="logout">
        <ShellContent ContentTemplate="{DataTemplate local:LogoutPage}" />
    </FlyoutItem>

</Shell>
```

2. AppShell.xaml.cs:
```csharp
using MauiApp1.Services;
using MauiApp1.Views;

namespace MauiApp1;

public partial class AppShell : Shell
{
    private readonly AuthService _authService;

    public AppShell()
    {
        InitializeComponent();
        _authService = ServiceHelper.GetService<AuthService>();

        // Explicit route registrations
        Routing.RegisterRoute("login", typeof(LoginPage));
        Routing.RegisterRoute("home", typeof(HomePage));
        Routing.RegisterRoute("predictions", typeof(PredictionsPage));
        Routing.RegisterRoute("settings", typeof(SettingsPage));
        Routing.RegisterRoute("gamerules", typeof(GameRulesPage));
        Routing.RegisterRoute("admin", typeof(AdminPage));
        Routing.RegisterRoute("logout", typeof(LogoutPage));
    }

    private async void OnLogoutClicked(object sender, EventArgs e)
    {
        await _authService.SignOutAsync();
        await Shell.Current.GoToAsync("//login");
    }

    public void ShowAdminMenu(bool show)
    {
        AdminMenuItem.IsVisible = show;
    }
}

public static class ServiceHelper
{
    public static T GetService<T>() => Current.GetService<T>();

    public static IServiceProvider Current =>
#if WINDOWS10_0_17763_0_OR_GREATER
        MauiWinUIApplication.Current.Services;
#elif ANDROID
        MauiApplication.Current.Services;
#elif IOS || MACCATALYST
        MauiUIApplicationDelegate.Current.Services;
#else
        null;
#endif
}
```

3. Services/LocalizationService.cs:
```csharp
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MauiApp1.Services
{
    public class LocalizationService : INotifyPropertyChanged
    {
        private static LocalizationService? _instance;
        public static LocalizationService Instance => _instance ??= new LocalizationService();

        private readonly Dictionary<string, Dictionary<string, string>> _translations = new()
        {
            ["en"] = new Dictionary<string, string>
            {
                ["Menu"] = "Menu",
                ["Home"] = "Home",
                ["Check_Predictions"] = "Check Predictions",
                ["Settings"] = "Settings",
                ["Game_Rules"] = "Game Rules",
                ["Admin_Panel"] = "Admin Panel",
                ["Log_out"] = "Log out",
                ["Change_Password"] = "Change password",
                ["Change_Language"] = "Change Language",
                ["Update_Email"] = "Update Email",
                ["Delete_Account"] = "Delete Account",
                ["App_Title"] = "VAR6 Betting App",
                ["Email"] = "Email",
                ["Password"] = "Password",
                ["Remember_Me"] = "Remember me",
                ["Sign_In"] = "Sign In",
                ["Create_Account"] = "Create Account"
            },
            ["fr"] = new Dictionary<string, string>
            {
                ["Menu"] = "Menu",
                ["Home"] = "Accueil",
                ["Check_Predictions"] = "Vérifier les Prédictions",
                ["Settings"] = "Paramètres",
                ["Game_Rules"] = "Règles du Jeu",
                ["Admin_Panel"] = "Panneau Admin",
                ["Log_out"] = "Se déconnecter",
                ["Change_Password"] = "Changer le mot de passe",
                ["Change_Language"] = "Changer la langue",
                ["Update_Email"] = "Mettre à jour l'email",
                ["Delete_Account"] = "Supprimer le compte",
                ["App_Title"] = "Application de Paris VAR6",
                ["Email"] = "Email",
                ["Password"] = "Mot de passe",
                ["Remember_Me"] = "Se souvenir de moi",
                ["Sign_In"] = "Se connecter",
                ["Create_Account"] = "Créer un compte"
            }
        };

        private string _currentLanguage = "en";

        public string CurrentLanguage
        {
            get => _currentLanguage;
            set
            {
                if (_currentLanguage != value)
                {
                    _currentLanguage = value;
                    OnPropertyChanged();
                    OnPropertyChanged(nameof(CurrentLanguage));
                    // Notify all string properties to update
                    OnPropertyChanged(nameof(MenuText));
                    OnPropertyChanged(nameof(HomeText));
                    OnPropertyChanged(nameof(CheckPredictionsText));
                    OnPropertyChanged(nameof(SettingsText));
                    OnPropertyChanged(nameof(GameRulesText));
                    OnPropertyChanged(nameof(AdminPanelText));
                    OnPropertyChanged(nameof(LogOutText));
                    OnPropertyChanged(nameof(ChangePasswordText));
                    OnPropertyChanged(nameof(ChangeLanguageText));
                    OnPropertyChanged(nameof(UpdateEmailText));
                    OnPropertyChanged(nameof(DeleteAccountText));
                    OnPropertyChanged(nameof(AppTitleText));
                    OnPropertyChanged(nameof(EmailText));
                    OnPropertyChanged(nameof(PasswordText));
                    OnPropertyChanged(nameof(RememberMeText));
                    OnPropertyChanged(nameof(SignInText));
                    OnPropertyChanged(nameof(CreateAccountText));
                }
            }
        }

        // Properties for direct binding
        public string MenuText => GetString("Menu");
        public string HomeText => GetString("Home");
        public string CheckPredictionsText => GetString("Check_Predictions");
        public string SettingsText => GetString("Settings");
        public string GameRulesText => GetString("Game_Rules");
        public string AdminPanelText => GetString("Admin_Panel");
        public string LogOutText => GetString("Log_out");
        public string ChangePasswordText => GetString("Change_Password");
        public string ChangeLanguageText => GetString("Change_Language");
        public string UpdateEmailText => GetString("Update_Email");
        public string DeleteAccountText => GetString("Delete_Account");
        public string AppTitleText => GetString("App_Title");
        public string EmailText => GetString("Email");
        public string PasswordText => GetString("Password");
        public string RememberMeText => GetString("Remember_Me");
        public string SignInText => GetString("Sign_In");
        public string CreateAccountText => GetString("Create_Account");

        public string GetString(string key)
        {
            if (_translations.TryGetValue(_currentLanguage, out var langDict) && 
                langDict.TryGetValue(key, out var value))
            {
                return value;
            }
            
            // Fallback to English
            if (_translations["en"].TryGetValue(key, out var fallback))
            {
                return fallback;
            }
            
            return key; // Return key if not found
        }

        public void SetLanguage(string language)
        {
            if (_translations.ContainsKey(language))
            {
                CurrentLanguage = language;
                Preferences.Set("app_language", language);
            }
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
```

4. Views/Views.xaml (Login Page):
```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage x:Class="MauiApp1.Views.LoginPage"
             xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:MauiApp1.ViewModels"
             xmlns:services="clr-namespace:MauiApp1.Services"
             x:DataType="vm:LoginViewModel"
             Title="{Binding Source={x:Static services:LocalizationService.Instance}, Path=AppTitleText}"
             BackgroundColor="White">

    <ScrollView>
        <StackLayout Padding="40" Spacing="20" VerticalOptions="Center">
            
            <!-- Logo -->
            <Image Source="1.jpg" 
                   HeightRequest="120" 
                   HorizontalOptions="Center" />
            
            <!-- Title -->
            <Label Text="{Binding Source={x:Static services:LocalizationService.Instance}, Path=AppTitleText}" 
                   FontSize="32" 
                   FontAttributes="Bold" 
                   TextColor="Black" 
                   HorizontalOptions="Center" />
            
            <!-- Email Entry -->
            <Frame BackgroundColor="White" BorderColor="Gray" CornerRadius="8">
                <Entry x:Name="EmailEntry"
                       Text="{Binding Email}"
                       Placeholder="{Binding Source={x:Static services:LocalizationService.Instance}, Path=EmailText}"
                       PlaceholderColor="Gray"
                       TextColor="Black"
                       Keyboard="Email"
                       ReturnType="Next"
                       Completed="OnEmailCompleted" />
            </Frame>
            
            <!-- Password Entry -->
            <Frame BackgroundColor="White" BorderColor="Gray" CornerRadius="8">
                <Entry x:Name="PasswordEntry"
                       Text="{Binding Password}"
                       Placeholder="{Binding Source={x:Static services:LocalizationService.Instance}, Path=PasswordText}"
                       PlaceholderColor="Gray"
                       TextColor="Black"
                       IsPassword="True"
                       ReturnType="Go"
                       Completed="OnPasswordCompleted" />
            </Frame>

            <!-- Remember Me -->
            <StackLayout Orientation="Horizontal" Spacing="10" VerticalOptions="Center">
                <CheckBox IsChecked="{Binding RememberMe}" Color="#6B9B47"/>
                <Label Text="{Binding Source={x:Static services:LocalizationService.Instance}, Path=RememberMeText}" VerticalOptions="Center" TextColor="Black"/>
            </StackLayout>
            
            <!-- Sign In Button -->
            <Button Text="{Binding Source={x:Static services:LocalizationService.Instance}, Path=SignInText}"
                    Command="{Binding SignInCommand}"
                    BackgroundColor="#007ACC"
                    TextColor="White"
                    CornerRadius="8"
                    HeightRequest="50"
                    IsEnabled="{Binding IsLoading, Converter={StaticResource InvertedBoolConverter}}" />
            
            <!-- Create Account Button -->
            <Button Text="{Binding Source={x:Static services:LocalizationService.Instance}, Path=CreateAccountText}"
                    Command="{Binding CreateAccountCommand}"
                    BackgroundColor="Transparent"
                    TextColor="#007ACC"
                    BorderColor="#007ACC"
                    BorderWidth="1"
                    CornerRadius="8"
                    HeightRequest="50"
                    IsEnabled="{Binding IsLoading, Converter={StaticResource InvertedBoolConverter}}" />
            
            <!-- Loading Indicator -->
            <ActivityIndicator IsVisible="{Binding IsLoading}" 
                             IsRunning="{Binding IsLoading}"
                             Color="#007ACC" />
            
        </StackLayout>
    </ScrollView>
    
</ContentPage>
```

5. Views/SettingsPage.xaml:
```xml
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage x:Class="MauiApp1.Views.SettingsPage"
             xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:services="clr-namespace:MauiApp1.Services"
             Title="Settings"
             BackgroundColor="White">

    <ContentPage.ToolbarItems>
        <ToolbarItem Text="←" Clicked="OnBackClicked" />
    </ContentPage.ToolbarItems>

    <Shell.TitleView>
        <Grid ColumnDefinitions="Auto,*,Auto" BackgroundColor="White">
            <Button Grid.Column="0" 
                    Text="☰" 
                    FontSize="20"
                    TextColor="Black"
                    BackgroundColor="Transparent"
                    BorderColor="Transparent"
                    Clicked="OnMenuClicked" />
            <Image Grid.Column="1" 
                   Source="1.jpg"
                   HeightRequest="40" 
                   VerticalOptions="Center" 
                   HorizontalOptions="Center" />
        </Grid>
    </Shell.TitleView>

    <ScrollView BackgroundColor="White">
        <VerticalStackLayout Padding="0" Spacing="0" BackgroundColor="White">

                         <!-- Change password -->
             <Grid Padding="20" RowDefinitions="Auto" ColumnDefinitions="*" BackgroundColor="White">
                 <Grid.GestureRecognizers>
                     <TapGestureRecognizer Tapped="OnChangePasswordClicked"/>
                 </Grid.GestureRecognizers>
                 <Label Text="{Binding ChangePasswordText}" FontSize="24" FontAttributes="Bold" TextColor="#6B9B47" />
             </Grid>
            <BoxView HeightRequest="1" BackgroundColor="#B9D98D" />

                         <!-- Change Language -->
             <Grid Padding="20" RowDefinitions="Auto" ColumnDefinitions="*" BackgroundColor="White">
                 <Grid.GestureRecognizers>
                     <TapGestureRecognizer Tapped="OnLanguageClicked"/>
                 </Grid.GestureRecognizers>
                 <Label Text="{Binding ChangeLanguageText}" FontSize="24" FontAttributes="Bold" TextColor="#6B9B47" />
             </Grid>
            <BoxView HeightRequest="1" BackgroundColor="#B9D98D" />

                         <!-- Update Email -->
             <Grid Padding="20" RowDefinitions="Auto" ColumnDefinitions="*" BackgroundColor="White">
                 <Grid.GestureRecognizers>
                     <TapGestureRecognizer Tapped="OnUpdateEmailClicked"/>
                 </Grid.GestureRecognizers>
                 <Label Text="{Binding UpdateEmailText}" FontSize="24" FontAttributes="Bold" TextColor="#6B9B47" />
             </Grid>
            <BoxView HeightRequest="1" BackgroundColor="#B9D98D" />



                                      <!-- Delete Account -->
             <Grid Padding="20" RowDefinitions="Auto" ColumnDefinitions="*" BackgroundColor="White">
                 <Grid.GestureRecognizers>
                     <TapGestureRecognizer Tapped="OnDeleteAccountClicked"/>
                 </Grid.GestureRecognizers>
                 <Label Text="{Binding DeleteAccountText}" FontSize="24" FontAttributes="Bold" TextColor="#6B9B47" />
             </Grid>
             <BoxView HeightRequest="1" BackgroundColor="#B9D98D" />

             <!-- Logout -->
             <Grid Padding="20" RowDefinitions="Auto" ColumnDefinitions="*" BackgroundColor="White">
                 <Grid.GestureRecognizers>
                     <TapGestureRecognizer Tapped="OnLogoutClicked"/>
                 </Grid.GestureRecognizers>
                 <Label Text="{Binding LogOutText}" FontSize="24" FontAttributes="Bold" TextColor="#FF4444" />
             </Grid>

         </VerticalStackLayout>
     </ScrollView>

</ContentPage>
```

6. MauiProgram.cs:
```csharp
using Microsoft.Extensions.Logging;
using MauiApp1.Services;
using MauiApp1.ViewModels;
using MauiApp1.Views;

namespace MauiApp1;
//dd12234
public static class MauiProgram
{
    public static MauiApp CreateMauiApp()
    {
        var builder = MauiApp.CreateBuilder();
        builder
            .UseMauiApp<App>()
            .ConfigureFonts(fonts =>
            {
                fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
            });

        // Services
        builder.Services.AddSingleton<AuthService>();
        builder.Services.AddSingleton<SupabaseService>();
        builder.Services.AddSingleton<LocalizationService>();

        // ViewModels
        builder.Services.AddTransient<LoginViewModel>();
        builder.Services.AddTransient<HomeViewModel>();
        builder.Services.AddTransient<AdminViewModel>();

        // Views
        builder.Services.AddTransient<LoginPage>();
        builder.Services.AddTransient<HomePage>();
        builder.Services.AddTransient<AdminPage>();
        builder.Services.AddTransient<PredictionsPage>();
        builder.Services.AddTransient<SettingsPage>();
        builder.Services.AddTransient<GameRulesPage>();
        builder.Services.AddTransient<LogoutPage>();

        // Add converter
        builder.Services.AddSingleton<InvertedBoolConverter>();

#if DEBUG
        builder.Logging.AddDebug();
#endif

        return builder.Build();
    }
}

public class InvertedBoolConverter : IValueConverter
{
    public object? Convert(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
    {
        return value is bool b ? !b : false;
    }

    public object? ConvertBack(object? value, Type targetType, object? parameter, System.Globalization.CultureInfo culture)
    {
        return value is bool b ? !b : false;
    }
}
```

7. Models/Models.cs:
```csharp
using Newtonsoft.Json;

namespace MauiApp1.Models
{
    public class Match
    {
        [JsonProperty("matchId")]
        public required string MatchId { get; set; }

        [JsonProperty("homeTeam")]
        public required string HomeTeam { get; set; }

        [JsonProperty("awayTeam")]
        public required string AwayTeam { get; set; }

        [JsonProperty("homeTeamCode")]
        public required string HomeTeamCode { get; set; }

        [JsonProperty("awayTeamCode")]
        public required string AwayTeamCode { get; set; }

        [JsonProperty("league")]
        public required string League { get; set; }

        [JsonProperty("timeUtc")]
        public long TimeUtc { get; set; }

        [JsonProperty("time")]
        public required string Time { get; set; }

        [JsonProperty("homeScore")]
        public int? HomeScore { get; set; }

        [JsonProperty("awayScore")]
        public int? AwayScore { get; set; }
    }

    public class Prediction
    {
        [JsonProperty("matchId")]
        public required string MatchId { get; set; }

        [JsonProperty("homeScore")]
        public int HomeScore { get; set; }

        [JsonProperty("awayScore")]
        public int AwayScore { get; set; }

        [JsonProperty("homeTeam")]
        public required string HomeTeam { get; set; }

        [JsonProperty("awayTeam")]
        public required string AwayTeam { get; set; }

        [JsonProperty("homeTeamCode")]
        public required string HomeTeamCode { get; set; }

        [JsonProperty("awayTeamCode")]
        public required string AwayTeamCode { get; set; }

        [JsonProperty("createdAt")]
        public long CreatedAt { get; set; }

        [JsonProperty("lockAt")]
        public long LockAt { get; set; }
    }

    public class User
    {
        public string Email { get; set; } = "";
        public string Uid { get; set; } = "";
        public bool IsAdmin => Email.ToLower() == "admin@gmail.com";
    }

    public class TeamInfo
    {
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public Color Color { get; set; } = Colors.Blue;
    }
}
```

This project is functional and ready for testing. The main features are working, and the application builds and runs successfully on Windows.
