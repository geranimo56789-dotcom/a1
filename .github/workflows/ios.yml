name: iOS (MAUI) Build
 # CI: workflow adjusted to fix YAML and trigger build

on:
  push:
    branches: [ master ]
    paths:
      - 'MauiApp1/**'
      - '.github/workflows/ios.yml'
  workflow_dispatch:
    inputs:
      configuration:
        description: Build configuration
        required: false
        default: Release
      project:
        description: Relative path to the MAUI project (.csproj)
        required: false
        default: MauiApp1/MauiApp1.csproj
      build_signed_ipa:
        description: 'Build signed IPA (requires Apple cert/profile secrets)'
        required: false
        default: 'false'
      package_app:
        description: 'Package .app/.ipa as artifact'
        required: false
        default: 'true'

jobs:
  build-ios:
    name: Build iOS
    runs-on: macos-14
    timeout-minutes: 60
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      CONFIG: "${{ github.event.inputs.configuration || 'Release' }}"
      PROJECT: "${{ github.event.inputs.project || 'MauiApp1/MauiApp1.csproj' }}"
      BUILD_SIGNED_IPA: "${{ github.event.inputs.build_signed_ipa || 'false' }}"
      PACKAGE_APP: "${{ github.event.inputs.package_app || 'true' }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install MAUI workload
        run: |
          dotnet nuget locals all --clear
          dotnet workload install maui --source https://api.nuget.org/v3/index.json

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore "$PROJECT"

      - name: Build iOS Simulator .app (unsigned)
        run: |
          dotnet build "$PROJECT" -c "$CONFIG" -f net8.0-ios /p:RuntimeIdentifier=iossimulator-arm64

      - name: Upload Simulator .app
        if: ${{ env.PACKAGE_APP == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-simulator-app
          path: |
            **/bin/${{ env.CONFIG }}/net8.0-ios/iossimulator-*/**/*.app
          if-no-files-found: warn

      - name: List simulator outputs
        if: ${{ env.PACKAGE_APP == 'true' }}
        run: |
          echo "Listing simulator outputs:"
          find . -type f -path "*/bin/${CONFIG}/net8.0-ios/iossimulator-*/*" -print || true

      - name: Prepare signing assets (optional)
        if: ${{ env.BUILD_SIGNED_IPA == 'true' }}
        env:
          P12_BASE64: ${{ secrets.APPLE_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          PROVISION_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          set -euo pipefail
          if [ -z "$P12_BASE64" ] || [ -z "$P12_PASSWORD" ] || [ -z "$PROVISION_BASE64" ]; then
            echo "Signing secrets missing. Set APPLE_P12_BASE64, APPLE_P12_PASSWORD, APPLE_PROVISIONING_PROFILE_BASE64." >&2
            exit 1
          fi
          mkdir -p signing
          echo "$P12_BASE64" | base64 --decode > signing/cert.p12
          echo "$PROVISION_BASE64" | base64 --decode > signing/profile.mobileprovision
          security create-keychain -p tempPass build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p tempPass build.keychain
          security import signing/cert.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k tempPass build.keychain
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$( /usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(/usr/bin/security cms -D -i signing/profile.mobileprovision) )
          cp signing/profile.mobileprovision "~/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          echo "PROVISION_UUID=$UUID" >> $GITHUB_ENV

      - name: Build signed IPA (device)
        if: ${{ env.BUILD_SIGNED_IPA == 'true' }}
        env:
          BUNDLE_ID: com.var6.bettingapp
          CODESIGN_KEY: ${{ secrets.APPLE_CODESIGN_CERT_NAME }}
        run: |
          # Adjust signing details if needed via MSBuild props
          dotnet publish "$PROJECT" -c "$CONFIG" -f net8.0-ios \
            /p:ArchiveOnBuild=true \
            /p:BuildIpa=true \
            "/p:CodesignKey=${CODESIGN_KEY:-Apple Distribution}" \
            "/p:CodesignProvision=${PROVISION_UUID}" \
            "/p:CodesignKeychain=build.keychain" \
            /p:RuntimeIdentifier=ios-arm64

      - name: Upload IPA
        if: ${{ env.BUILD_SIGNED_IPA == 'true' && env.PACKAGE_APP == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            **/bin/${{ env.CONFIG }}/net8.0-ios/ios-arm64/**/publish/*.ipa
          if-no-files-found: warn

      - name: List device outputs
        if: ${{ env.BUILD_SIGNED_IPA == 'true' }}
        run: |
          echo "Listing device outputs:"
          find . -type f -path "*/bin/${CONFIG}/net8.0-ios/ios-arm64/*" -print || true
